---
const picture = import.meta.env.PICTURE;
const firstName = import.meta.env.FIRST_NAME;
const lastName = import.meta.env.LAST_NAME;
const title = import.meta.env.TITLE;
const company = import.meta.env.COMPANY;
const email = import.meta.env.EMAIL;
const linkedin = import.meta.env.LINKEDIN;
const xing = import.meta.env.XING;
const github = import.meta.env.GITHUB;
const website = import.meta.env.WEBSITE;

let links = [];

if (email) {
  links.push({
    name: email,
    icon: "fa-solid fa-envelope",
    url: "mailto:" + email,
  });
}

if (linkedin) {
  links.push({
    name: extractPath(linkedin),
    icon: "fa-brands fa-linkedin",
    url: linkedin,
  });
}

if (xing) {
  links.push({
    name: extractPath(xing),
    icon: "fa-brands fa-xing",
    url: xing,
  });
}

if (github) {
  links.push({
    name: extractPath(github),
    icon: "fa-brands fa-github",
    url: website,
  });
}

if (website) {
  links.push({
    name: extractDomain(website),
    icon: "fa-solid fa-globe",
    url: website,
  });
}

function extractDomain(url: string) {
  if (!url.startsWith("http")) {
    url = "http://" + url;
  }
  const hostname = new URL(url).hostname;
  let result = hostname.startsWith("www.") ? hostname.slice(4) : hostname;

  if (result.endsWith("/") && result !== hostname) {
    result = result.slice(0, -1);
  }

  return result;
}

function extractPath(url: string) {
  if (!url.startsWith("http")) {
    url = "http://" + url;
  }

  const u = new URL(url);
  const hostname = u.hostname.startsWith("www.")
    ? u.hostname.slice(4)
    : u.hostname;
  // Combine hostname + pathname
  let result = u.pathname;
  if (result.startsWith("/") && result !== hostname) {
    result = result.slice(1);
  }
  // Remove trailing /
  if (result.endsWith("/") && result !== hostname) {
    result = result.slice(0, -1);
  }
  return result;
}
---

<div class="card max-w-2xl flex rounded-lg p-8 w-full">
  <div class="glow"></div>
  <div class="flex gap-8 w-full self-center">
    <div class="flex flex-col text-right grow gap-2">
      <div
        class="self-center size-32 bg-blue-800/50 rounded-full flex items-center justify-center"
      >
        <img
          src={picture}
          alt="Profile Picture"
          class="rounded-full size-28 object-cover self-center"
        />
      </div>
      <div class="self-center">
        <div class="text-xl font-bold">{firstName} {lastName}</div>
        <div>{title}</div>
        <div class="text-sm italic">{company}</div>
      </div>
    </div>
    <div class="links flex items-center w-fit text-sm">
      <ul class="grid grid-cols-[auto, 1fr] gap-x-1.5 gap-y-2.5">
        {
          links.map((link) => (
            <li class="grid grid-cols-subgrid col-span-2 items-center">
              <a
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                class="grid grid-cols-subgrid col-span-2 items-center"
              >
                <div class="rounded-full bg-blue-800/50 flex items-center justify-center size-7 text-white">
                  <i class={link.icon} />
                </div>

                {link.name}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</div>

<script>
  const card = document.querySelector(".card");
  let bounds: any;

  function rotateToMouse(e: { clientX: any; clientY: any }) {
    if (!card) return;
    const mouseX = e.clientX;
    const mouseY = e.clientY;
    const leftX = mouseX - bounds.x;
    const topY = mouseY - bounds.y;
    const center = {
      x: leftX - bounds.width / 2,
      y: topY - bounds.height / 2,
    };

    const distance = Math.sqrt(center.x ** 2 + center.y ** 2);

    (card as HTMLElement).style.transform = `
    scale3d(1.05, 1.05, 1.05)`;

    const glow = card.querySelector(".glow");
    if (glow) {
      (glow as HTMLElement).style.backgroundImage = `
      radial-gradient(
        circle at
        ${center.x * 2 + bounds.width / 2}px
        ${center.y * 2 + bounds.height / 2}px,
        #ffffff55,
        #0000000f
      )
    `;
    }
  }

  if (card) {
    card.addEventListener("mouseenter", () => {
      bounds = card.getBoundingClientRect();
      document.addEventListener("mousemove", rotateToMouse);
    });

    card.addEventListener("mouseleave", () => {
      document.removeEventListener("mousemove", rotateToMouse);
      (card as HTMLElement).style.transform = "";
      (card as HTMLElement).style.background = "";
    });
  }
</script>

<style>
  img {
    transition: transform 250ms ease-in-out;
  }

  img:hover() {
    transform: scale(1.05);
  }

  .card {
    position: relative;

    transition-duration: 250ms;
    transition-property: transform, box-shadow;
    transition-timing-function: ease-in-out;
    box-shadow: 0 1px 5px #00000099;
  }

  .card:hover {
    transition-duration: 150ms;
    box-shadow: 0 5px 20px 5px #00000044;
  }

  .card .glow {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    pointer-events: none;
    background-image: radial-gradient(circle at 50% -20%, #ffffff22, #0000000f);
  }

  a:hover {
    filter: brightness(1.25);
  }
</style>
